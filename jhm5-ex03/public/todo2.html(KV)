<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced To-Do List with Calendar (KV Storage)</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f7fa;
            margin: 0;
            padding: 20px;
        }
        .header {
            text-align: center;
            margin-bottom: 20px;
        }
        .datetime {
            font-size: 18px;
            color: #555;
            margin-bottom: 10px;
        }
        .status-message {
            color: #666;
            font-size: 14px;
            margin-bottom: 10px;
        }
        .container {
            display: flex;
            flex-direction: column;
            gap: 20px;
            max-width: 1400px;
            margin: 0 auto;
        }
        .main-content {
            display: flex;
            gap: 20px;
        }
        .kanban-container {
            flex: 3;
            display: flex;
            gap: 20px;
        }
        .calendar-container {
            flex: 1;
            background-color: white;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            height: fit-content;
        }
        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        .calendar-title {
            font-weight: bold;
            font-size: 18px;
        }
        .calendar-nav {
            display: flex;
            gap: 10px;
        }
        .calendar-nav button {
            background: none;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 5px 10px;
            cursor: pointer;
        }
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
        }
        .calendar-day-header {
            text-align: center;
            font-weight: bold;
            padding: 5px;
            font-size: 12px;
            color: #555;
        }
        .calendar-day {
            aspect-ratio: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }
        .calendar-day:hover {
            background-color: #f0f0f0;
        }
        .calendar-day.today {
            background-color: #e3f2fd;
            font-weight: bold;
        }
        .calendar-day.selected {
            background-color: #bbdefb;
            font-weight: bold;
        }
        .calendar-day.other-month {
            color: #aaa;
        }
        .calendar-day.has-tasks {
            position: relative;
        }
        .calendar-day.has-tasks::after {
            content: '';
            position: absolute;
            bottom: 3px;
            width: 5px;
            height: 5px;
            background-color: #388e3c;
            border-radius: 50%;
        }
        .column {
            flex: 1;
            background-color: white;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .column-header {
            font-weight: bold;
            font-size: 18px;
            padding: 10px;
            margin: -15px -15px 15px -15px;
            border-radius: 8px 8px 0 0;
            text-align: center;
        }
        #todo-column .column-header {
            background-color: #ffebee;
            color: #d32f2f;
        }
        #progress-column .column-header {
            background-color: #fff8e1;
            color: #ff8f00;
        }
        #done-column .column-header {
            background-color: #e8f5e9;
            color: #388e3c;
        }
        .task-list {
            min-height: 100px;
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
        .task-item {
            background-color: white;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            padding: 12px;
            margin-bottom: 10px;
            cursor: grab;
            transition: all 0.2s;
        }
        .task-item:hover {
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .task-item.dragging {
            opacity: 0.5;
            background-color: #f5f5f5;
        }
        .task-title {
            font-weight: 500;
            margin-bottom: 5px;
        }
        .task-meta {
            display: flex;
            flex-direction: column;
            gap: 3px;
            font-size: 12px;
            color: #666;
            margin-bottom: 8px;
        }
        .task-date {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        .task-date-icon {
            font-size: 10px;
        }
        .task-actions {
            display: flex;
            gap: 5px;
            margin-top: 8px;
        }
        .task-btn {
            border: none;
            border-radius: 3px;
            padding: 3px 8px;
            font-size: 12px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .progress-btn {
            background-color: #fff8e1;
            color: #ff8f00;
        }
        .complete-btn {
            background-color: #e8f5e9;
            color: #388e3c;
        }
        .back-btn {
            background-color: #e3f2fd;
            color: #1976d2;
        }
        .delete-btn {
            background-color: #ffebee;
            color: #d32f2f;
        }
        .date-btn {
            background-color: #f3e5f5;
            color: #8e24aa;
        }
        .add-task {
            display: flex;
            margin-top: 15px;
        }
        .add-task input {
            flex-grow: 1;
            padding: 8px;
            border: 1px solid #e0e0e0;
            border-radius: 4px 0 0 4px;
        }
        .add-task button {
            padding: 8px 15px;
            background-color: #1976d2;
            color: white;
            border: none;
            border-radius: 0 4px 4px 0;
            cursor: pointer;
        }
        .date-inputs {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        .date-input {
            flex: 1;
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 12px;
        }
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            z-index: 100;
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            width: 300px;
        }
        .modal-title {
            font-weight: bold;
            margin-bottom: 15px;
        }
        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 20px;
        }
        .modal-btn {
            padding: 5px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .modal-btn.primary {
            background-color: #1976d2;
            color: white;
        }
        .modal-btn.secondary {
            background-color: #f5f5f5;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Advanced To-Do List with Calendar (KV Storage)</h1>
        <div class="datetime" id="current-datetime"></div>
        <div class="status-message" id="status-message"></div>
    </div>

    <div class="container">
        <div class="main-content">
            <div class="kanban-container">
                <div class="column" id="todo-column">
                    <div class="column-header">To-Do</div>
                    <ul class="task-list" id="todo-list">
                        <!-- Tasks will be loaded from KV storage -->
                    </ul>
                    <div class="add-task">
                        <input type="text" id="new-todo-task" placeholder="Add new task...">
                        <button onclick="openAddTaskModal('todo')">Add</button>
                    </div>
                </div>

                <div class="column" id="progress-column">
                    <div class="column-header">In Progress</div>
                    <ul class="task-list" id="progress-list">
                        <!-- Tasks will be loaded from KV storage -->
                    </ul>
                </div>

                <div class="column" id="done-column">
                    <div class="column-header">Done</div>
                    <ul class="task-list" id="done-list">
                        <!-- Tasks will be loaded from KV storage -->
                    </ul>
                </div>
            </div>

            <div class="calendar-container">
                <div class="calendar-header">
                    <div class="calendar-title" id="calendar-month-year"></div>
                    <div class="calendar-nav">
                        <button onclick="previousMonth()">←</button>
                        <button onclick="nextMonth()">→</button>
                    </div>
                </div>
                <div class="calendar-grid" id="calendar-days-header"></div>
                <div class="calendar-grid" id="calendar-days"></div>
            </div>
        </div>
    </div>

    <!-- Add Task Modal -->
    <div class="modal" id="add-task-modal">
        <div class="modal-content">
            <div class="modal-title">Add New Task</div>
            <input type="text" id="modal-task-title" placeholder="Task title" class="date-input">
            <div class="date-inputs">
                <input type="date" id="modal-start-date" class="date-input">
                <input type="date" id="modal-end-date" class="date-input">
            </div>
            <div class="modal-actions">
                <button class="modal-btn secondary" onclick="closeModal('add-task-modal')">Cancel</button>
                <button class="modal-btn primary" onclick="confirmAddTask()">Add Task</button>
            </div>
        </div>
    </div>

    <!-- Edit Dates Modal -->
    <div class="modal" id="edit-dates-modal">
        <div class="modal-content">
            <div class="modal-title">Edit Task Dates</div>
            <div class="date-inputs">
                <input type="date" id="edit-start-date" class="date-input">
                <input type="date" id="edit-end-date" class="date-input">
            </div>
            <div class="modal-actions">
                <button class="modal-btn secondary" onclick="closeModal('edit-dates-modal')">Cancel</button>
                <button class="modal-btn primary" onclick="confirmEditDates()">Save Changes</button>
            </div>
        </div>
    </div>

    <script>
        // Status message handling
        function showStatus(message) {
            document.getElementById('status-message').textContent = message;
        }
        
        function clearStatus() {
            document.getElementById('status-message').textContent = '';
        }

        // Current date and time display
        function updateDateTime() {
            const now = new Date();
            const options = { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            };
            document.getElementById('current-datetime').textContent = now.toLocaleDateString('en-US', options);
        }
        
        // Update every second
        updateDateTime();
        setInterval(updateDateTime, 1000);

        // Calendar functionality
        let currentMonth = new Date().getMonth();
        let currentYear = new Date().getFullYear();
        let selectedDate = new Date();
        let tasks = [];

        function renderCalendar() {
            const calendarDaysHeader = document.getElementById('calendar-days-header');
            const calendarDays = document.getElementById('calendar-days');
            const monthYearDisplay = document.getElementById('calendar-month-year');
            
            // Set month and year title
            const monthNames = ["January", "February", "March", "April", "May", "June",
                              "July", "August", "September", "October", "November", "December"];
            monthYearDisplay.textContent = `${monthNames[currentMonth]} ${currentYear}`;
            
            // Clear previous calendar
            calendarDaysHeader.innerHTML = '';
            calendarDays.innerHTML = '';
            
            // Add day headers
            const dayNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
            dayNames.forEach(day => {
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day-header';
                dayElement.textContent = day;
                calendarDaysHeader.appendChild(dayElement);
            });
            
            // Get first day of month and total days in month
            const firstDay = new Date(currentYear, currentMonth, 1).getDay();
            const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
            const daysInLastMonth = new Date(currentYear, currentMonth, 0).getDate();
            
            // Add days from previous month
            for (let i = 0; i < firstDay; i++) {
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day other-month';
                dayElement.textContent = daysInLastMonth - firstDay + i + 1;
                calendarDays.appendChild(dayElement);
            }
            
            // Add days of current month
            const today = new Date();
            for (let i = 1; i <= daysInMonth; i++) {
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day';
                dayElement.textContent = i;
                
                // Highlight today
                if (i === today.getDate() && currentMonth === today.getMonth() && currentYear === today.getFullYear()) {
                    dayElement.classList.add('today');
                }
                
                // Highlight selected date
                if (i === selectedDate.getDate() && currentMonth === selectedDate.getMonth() && currentYear === selectedDate.getFullYear()) {
                    dayElement.classList.add('selected');
                }
                
                // Check if day has tasks
                const date = new Date(currentYear, currentMonth, i);
                if (hasTasksOnDate(date)) {
                    dayElement.classList.add('has-tasks');
                }
                
                dayElement.onclick = () => {
                    selectedDate = new Date(currentYear, currentMonth, i);
                    renderCalendar();
                    filterTasksByDate(selectedDate);
                };
                
                calendarDays.appendChild(dayElement);
            }
            
            // Add days from next month to fill the grid
            const totalDays = firstDay + daysInMonth;
            const remainingDays = totalDays % 7 === 0 ? 0 : 7 - (totalDays % 7);
            for (let i = 1; i <= remainingDays; i++) {
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day other-month';
                dayElement.textContent = i;
                calendarDays.appendChild(dayElement);
            }
        }
        
        function hasTasksOnDate(date) {
            return tasks.some(task => {
                const startDate = new Date(task.startDate);
                const endDate = new Date(task.endDate);
                
                // Check if date is between start and end dates (inclusive)
                return date >= new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate()) &&
                       date <= new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate());
            });
        }
        
        function filterTasksByDate(date) {
            // Hide all tasks first
            document.querySelectorAll('.task-item').forEach(task => {
                task.style.display = 'none';
            });
            
            // Show tasks that match the selected date
            tasks.forEach(task => {
                const startDate = new Date(task.startDate);
                const endDate = new Date(task.endDate);
                const selected = new Date(date.getFullYear(), date.getMonth(), date.getDate());
                
                if (selected >= new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate()) &&
                    selected <= new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate())) {
                    const taskElement = document.getElementById(`task-${task.id}`);
                    if (taskElement) {
                        taskElement.style.display = 'block';
                    }
                }
            });
        }
        
        function previousMonth() {
            currentMonth--;
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear--;
            }
            renderCalendar();
        }
        
        function nextMonth() {
            currentMonth++;
            if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
            renderCalendar();
        }
        
        // Task management (integrated with KV storage)
        let tasks = [];
        let currentTaskColumn = '';
        let taskBeingEdited = null;
        
        // Load tasks from KV storage
        async function fetchTasks() {
            try {
                showStatus('Loading tasks...');
                const response = await fetch('/api/tasks', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error('Failed to load tasks');
                }
                
                const data = await response.json();
                tasks = data.tasks || [];
                return tasks;
            } catch (error) {
                showStatus('Load failed, using local data');
                console.error('Failed to load tasks:', error);
                return [];
            }
        }
        
        // Save tasks to KV storage
        async function saveTasks() {
            try {
                showStatus('Saving tasks...');
                const response = await fetch('/api/tasks', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ tasks: tasks })
                });
                
                if (!response.ok) {
                    throw new Error('Failed to save tasks');
                }
                
                clearStatus();
                return true;
            } catch (error) {
                showStatus('Save failed, please try again');
                console.error('Failed to save tasks:', error);
                return false;
            }
        }
        
        // Initialize sample tasks (only if no data exists on first load)
        async function initializeSampleTasks() {
            if (tasks.length === 0) {
                const now = new Date();
                const tomorrow = new Date();
                tomorrow.setDate(now.getDate() + 1);
                const nextWeek = new Date();
                nextWeek.setDate(now.getDate() + 7);
                
                await addTaskWithDates('todo', 'Complete project proposal', now, tomorrow);
                await addTaskWithDates('progress', 'Design homepage mockup', now, nextWeek);
                await addTaskWithDates('done', 'Set up development environment', now, now);
            }
        }
        
        // Add task with dates
        async function addTaskWithDates(column, title, startDate, endDate) {
            const task = {
                id: Date.now().toString(), // Use timestamp as unique ID
                title: title,
                column: column,
                startDate: startDate.toISOString().split('T')[0],
                endDate: endDate.toISOString().split('T')[0],
                addedDate: new Date().toISOString()
            };
            
            tasks.push(task);
            renderTask(task);
            await saveTasks();
            renderCalendar();
        }
        
        // Render a single task
        function renderTask(task) {
            const list = document.getElementById(`${task.column}-list`);
            const newItem = document.createElement('li');
            newItem.className = 'task-item';
            newItem.id = `task-${task.id}`;
            newItem.draggable = true;
            
            const startDate = new Date(task.startDate);
            const endDate = new Date(task.endDate);
            
            newItem.innerHTML = `
                <div class="task-title">${task.title}</div>
                <div class="task-meta">
                    <div class="task-date">
                        <span class="task-date-icon">📅</span>
                        <span>Start: ${formatDate(startDate)}</span>
                    </div>
                    <div class="task-date">
                        <span class="task-date-icon">🏁</span>
                        <span>End: ${formatDate(endDate)}</span>
                    </div>
                </div>
                <div class="task-actions">
                    ${task.column === 'todo' ? 
                        '<button class="task-btn progress-btn" onclick="moveTask(this, \'progress\')">Start</button>' : 
                        ''}
                    ${task.column === 'progress' ? 
                        '<button class="task-btn complete-btn" onclick="moveTask(this, \'done\')">Complete</button>' : 
                        ''}
                    <button class="task-btn date-btn" onclick="openEditDatesModal('${task.id}')">Edit Dates</button>
                    <button class="task-btn delete-btn" onclick="deleteTask('${task.id}')">Delete</button>
                </div>
            `;
            
            list.appendChild(newItem);
            setupDragEvents(newItem);
        }
        
        // Format date for display
        function formatDate(date) {
            return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
        }
        
        // Modal functions
        function openAddTaskModal(column) {
            const input = document.getElementById(`new-${column}-task`);
            const taskText = input.value.trim();
            
            if (taskText || column !== 'todo') {
                document.getElementById('modal-task-title').value = taskText;
                if (column === 'todo') input.value = '';
                
                const today = new Date().toISOString().split('T')[0];
                document.getElementById('modal-start-date').value = today;
                document.getElementById('modal-end-date').value = today;
                
                currentTaskColumn = column;
                document.getElementById('add-task-modal').style.display = 'flex';
            }
        }
        
        function openEditDatesModal(taskId) {
            const task = tasks.find(t => t.id === taskId);
            if (task) {
                taskBeingEdited = taskId;
                document.getElementById('edit-start-date').value = task.startDate;
                document.getElementById('edit-end-date').value = task.endDate;
                document.getElementById('edit-dates-modal').style.display = 'flex';
            }
        }
        
        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }
        
        async function confirmAddTask() {
            const title = document.getElementById('modal-task-title').value.trim();
            const startDate = document.getElementById('modal-start-date').value;
            const endDate = document.getElementById('modal-end-date').value;
            
            if (title && startDate && endDate) {
                await addTaskWithDates(currentTaskColumn, title, new Date(startDate), new Date(endDate));
                closeModal('add-task-modal');
            }
        }
        
        async function confirmEditDates() {
            const startDate = document.getElementById('edit-start-date').value;
            const endDate = document.getElementById('edit-end-date').value;
            
            if (taskBeingEdited && startDate && endDate) {
                const taskIndex = tasks.findIndex(t => t.id === taskBeingEdited);
                if (taskIndex !== -1) {
                    // Save original column information
                    const originalColumn = tasks[taskIndex].column;
                    
                    // Update task data
                    tasks[taskIndex].startDate = startDate;
                    tasks[taskIndex].endDate = endDate;
                    
                    // Re-render the task
                    const taskElement = document.getElementById(`task-${taskBeingEdited}`);
                    if (taskElement) {
                        taskElement.remove();
                        renderTask(tasks[taskIndex]);
                    }
                    
                    await saveTasks();
                    renderCalendar();
                    closeModal('edit-dates-modal');
                    taskBeingEdited = null;
                }
            }
        }
        
        // Move task between columns
        async function moveTask(button, targetColumn) {
            const taskItem = button.closest('.task-item');
            const taskId = taskItem.id.replace('task-', '');
            const taskIndex = tasks.findIndex(t => t.id === taskId);
            
            if (taskIndex !== -1) {
                // Update task column
                tasks[taskIndex].column = targetColumn;
                
                // Re-render the task
                taskItem.remove();
                renderTask(tasks[taskIndex]);
                
                await saveTasks();
                renderCalendar();
            }
        }
        
        // Delete task
        async function deleteTask(taskId) {
            const taskIndex = tasks.findIndex(t => t.id === taskId);
            if (taskIndex !== -1) {
                // Remove from array
                tasks.splice(taskIndex, 1);
                
                // Remove from DOM
                const taskElement = document.getElementById(`task-${taskId}`);
                if (taskElement) {
                    taskElement.remove();
                }
                
                await saveTasks();
                renderCalendar();
            }
        }
        
        // Drag and drop functionality
        function setupDragEvents(item) {
            item.addEventListener('dragstart', () => {
                item.classList.add('dragging');
            });
            
            item.addEventListener('dragend', () => {
                item.classList.remove('dragging');
            });
        }
        
        // Set up drop zones for columns
        document.querySelectorAll('.task-list').forEach(list => {
            list.addEventListener('dragover', e => {
                e.preventDefault();
                const draggingItem = document.querySelector('.dragging');
                if (draggingItem) {
                    const afterElement = getDragAfterElement(list, e.clientY);
                    if (afterElement) {
                        list.insertBefore(draggingItem, afterElement);
                    } else {
                        list.appendChild(draggingItem);
                    }
                }
            });
            
            list.addEventListener('drop', async e => {
                e.preventDefault();
                const draggingItem = document.querySelector('.dragging');
                if (draggingItem) {
                    const taskId = draggingItem.id.replace('task-', '');
                    const newColumn = list.id.replace('-list', '');
                    const taskIndex = tasks.findIndex(t => t.id === taskId);
                    
                    if (taskIndex !== -1 && tasks[taskIndex].column !== newColumn) {
                        tasks[taskIndex].column = newColumn;
                        await saveTasks();
                        renderCalendar();
                    }
                }
            });
        });
        
        function getDragAfterElement(container, y) {
            const draggableElements = [...container.querySelectorAll('.task-item:not(.dragging)')];
            
            return draggableElements.reduce((closest, child) => {
                const box = child.getBoundingClientRect();
                const offset = y - box.top - box.height / 2;
                if (offset < 0 && offset > closest.offset) {
                    return { offset: offset, element: child };
                } else {
                    return closest;
                }
            }, { offset: Number.NEGATIVE_INFINITY }).element;
        }
        
        // Initialize application
        async function init() {
            await fetchTasks();       // Load tasks from KV
            renderAllTasks();         // Render all tasks
            renderCalendar();         // Render calendar
            await initializeSampleTasks();  // Initialize sample tasks if needed
            
            // Support adding tasks with Enter key
            document.getElementById('new-todo-task').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    openAddTaskModal('todo');
                }
            });
        }
        
        // Render all tasks
        function renderAllTasks() {
            // Clear all lists
            document.getElementById('todo-list').innerHTML = '';
            document.getElementById('progress-list').innerHTML = '';
            document.getElementById('done-list').innerHTML = '';
            
            // Render each task
            tasks.forEach(task => {
                renderTask(task);
            });
        }
        
        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>
